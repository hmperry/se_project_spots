!function(){"use strict";const e={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__submit-button",inactiveButtonClass:"modal__submit-button_inactive",inputErrorClass:"modal__input_type_error",errorClass:"modal__error"},t=(e,t,o)=>{e.querySelector(`#${t.id}-error`).textContent="",t.classList.remove(o.inputErrorClass)},o=(e,t,o)=>{(e=>e.some((e=>!e.validity.valid)))(e)?r(t,o):(t.classList.remove(o.inactiveButtonClass),t.disabled=!1)},r=(e,t)=>{e.classList.add(t.inactiveButtonClass),e.disabled=!0},n=e=>{Array.from(document.querySelectorAll(e.formSelector)).forEach((n=>{((e,n)=>{const a=Array.from(e.querySelectorAll(n.inputSelector)),s=e.querySelector(n.submitButtonSelector);console.log(a),console.log(s),o(a,s,n),e.addEventListener("reset",(()=>{r(s,n)})),a.forEach((r=>{r.addEventListener("input",(function(){((e,o,r)=>{console.log(o.validationMessage),o.validity.valid?t(e,o,r):((e,t,o,r)=>{e.querySelector(`#${t.id}-error`).textContent=o,t.classList.add(r.inputErrorClass)})(e,o,o.validationMessage,r)})(e,r,n),o(a,s,n)}))}))})(n,e)}))};n(e);const a=new class{constructor({baseUrl:e,headers:t,cardID:o}){this._baseUrl=e,this._headers=t}getAppInfo(){return Promise.all([this.getInitialCards(),this.getUserInfo()])}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{method:"GET",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}addNewCard({name:e,link:t}){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:{...this._headers,"Content-Type":"application/json"},body:JSON.stringify({name:e,link:t})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:{...this._headers,"Content-Type":"application/json"}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}changeLike(e,t){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:t?"DELETE":"PUT",headers:{...this._headers,"Content-Type":"application/json"}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}editUserInfo({name:e,about:t}){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:{...this._headers,"Content-Type":"application/json"},body:JSON.stringify({name:e,about:t})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}changeProfilePicture({avatar:e}){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:{...this._headers,"Content-Type":"application/json"},body:JSON.stringify({avatar:e})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"3865b531-c637-4f08-82ee-36af95a41c77","Content-Type":"application/json"}}),s=document.querySelector(".profile__avatar"),c=document.querySelector(".profile__name"),i=document.querySelector(".profile__title"),l=document.forms["profile-form"],d=document.querySelector(".profile__edit-button"),u=document.querySelector(".image__container"),m=document.querySelector("#avatar-modal"),_=document.querySelector("#avatar-form"),h=m.querySelector(".modal__submit-button"),v=document.querySelector("#avatar-link-input"),f=document.querySelector("#edit-profile-modal"),p=f.querySelector("#profile-name-input"),y=f.querySelector("#profile-description-input"),S=f.querySelector(".modal__submit-button"),C=document.querySelector(".profile__new-post-button"),b=document.querySelector("#add-card-modal"),E=b.querySelector("#add-card-link-input"),k=b.querySelector("#add-card-name-input"),q=document.forms["add-card-form"],g=b.querySelector(".modal__submit-button"),L=document.querySelector("#cards_list"),x=document.querySelector("#card-template"),T=document.querySelector("#preview-modal"),j=T.querySelector(".modal__image"),$=T.querySelector(".modal__caption"),P=document.querySelector("#delete-modal"),U=P.querySelector(".modal__delete-button"),A=document.querySelector(".modal__cancel-button");let D,w;const I=document.querySelectorAll(".modal__close-button"),N=document.querySelectorAll(".modal");a.getAppInfo().then((([e,t])=>{e.forEach((e=>{const t=H(e);L.append(t)})),s.src=t.avatar,console.log(t),i.textContent=t.about,c.textContent=t.name})).catch((e=>{console.error(e)})),l.addEventListener("submit",(function(e){e.preventDefault(),S.textContent="Saving...",a.editUserInfo({name:p.value,about:y.value}).then((e=>{S.textContent="Save",c.textContent=e.name,i.textContent=e.about,G(f)})).catch((()=>{S.textContent="Save failed. Try again.",console.error(),setTimeout((()=>{U.textContent="Save"}),2e3)}))})),U.addEventListener("click",(function(){U.textContent="Deleting...",a.deleteCard(w).then((()=>{U.textContent="Delete",D.remove(),G(P)})).catch((()=>{U.textContent="Delete failed. Try again.",console.error(),setTimeout((()=>{U.textContent="Delete"}),2e3)}))})),A.addEventListener("click",(()=>G(P))),q.addEventListener("submit",(function(e){e.preventDefault(),g.textContent="Saving...";const t={name:k.value,link:E.value},o=H(t);a.addNewCard(t).then((t=>{g.textContent="Save",t.name=k.value,t.link=E.value,G(b),e.target.reset(),L.prepend(o)})).catch((()=>{g.textContent="Save failed. Try again.",console.error(),setTimeout((()=>{g.textContent="Save"}),2e3)}))})),u.addEventListener("click",(()=>{J(m)})),C.addEventListener("click",(()=>{J(b)})),h.addEventListener("click",(function(e){e.preventDefault(),h.textContent="Saving...";const t={avatar:v.value};a.changeProfilePicture(t).then((e=>{h.textContent="Save",e.avatar=v.value,G(m),_.reset(),s.src=e.avatar})).catch((()=>{h.textContent="Save failed. Try again.",console.error(),setTimeout((()=>{h.textContent="Save"}),2e3)}))})),d.addEventListener("click",(function(){var o,r;p.value=c.textContent,y.value=i.textContent,o=l,r=e,[p,y].forEach((e=>{t(o,e,r)})),J(f)}));const B=e=>{N.forEach((t=>{e.target===t&&t.classList.contains("modal_opened")&&G(t)}))},O=e=>{N.forEach((t=>{"Escape"===e.key&&N.forEach(G)}))};function J(e){e.classList.add("modal_opened"),document.addEventListener("mousedown",B),document.addEventListener("keydown",O)}function G(e){e.classList.remove("modal_opened"),document.removeEventListener("mousedown",B),document.removeEventListener("keydown",O)}function H(e){const t=x.content.querySelector(".card").cloneNode(!0);t.querySelector(".card__title").textContent=e.name;const o=t.querySelector(".card__image");o.src=e.link,o.alt=e.name;const r=t.querySelector(".card__like-button");return!0===e.isLiked&&r.classList.add("card__like-button_liked"),r.addEventListener("click",(t=>function(e,t){console.log(t),w=t._id;const o=!!e.target.classList.contains("card__like-button_liked");a.changeLike(t._id,o).then((()=>{!0===o?e.target.classList.remove("card__like-button_liked"):e.target.classList.add("card__like-button_liked")})).catch(console.error)}(t,e))),t.querySelector(".card__delete-button").addEventListener("click",(o=>function(e,t){D=e,w=t._id,J(P)}(t,e))),o.addEventListener("click",(()=>{j.src=e.link,j.alt=e.name,$.textContent=e.name,J(T)})),t}I.forEach((e=>{const t=e.closest(".modal");e.addEventListener("click",(()=>G(t)))})),n(e)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,