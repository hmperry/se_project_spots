!function(){"use strict";const e={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__submit-button",inactiveButtonClass:"modal__submit-button_inactive",inputErrorClass:"modal__input_type_error",errorClass:"modal__error"},t=(e,t,r)=>{e.querySelector(`#${t.id}-error`).textContent="",t.classList.remove(r.inputErrorClass)},r=(e,t,r)=>{(e=>e.some((e=>!e.validity.valid)))(e)?n(t,r):(t.classList.remove(r.inactiveButtonClass),t.disabled=!1)},n=(e,t)=>{e.classList.add(t.inactiveButtonClass),e.disabled=!0},o=e=>{Array.from(document.querySelectorAll(e.formSelector)).forEach((o=>{((e,o)=>{const a=Array.from(e.querySelectorAll(o.inputSelector)),s=e.querySelector(o.submitButtonSelector);console.log(a),console.log(s),r(a,s,o),e.addEventListener("reset",(()=>{n(s,o)})),a.forEach((n=>{n.addEventListener("input",(function(){((e,r,n)=>{console.log(r.validationMessage),r.validity.valid?t(e,r,n):((e,t,r,n)=>{e.querySelector(`#${t.id}-error`).textContent=r,t.classList.add(n.inputErrorClass)})(e,r,r.validationMessage,n)})(e,n,o),r(a,s,o)}))}))})(o,e)}))};o(e);const a=new class{constructor({baseUrl:e,headers:t,cardID:r}){this._baseUrl=e,this._headers=t}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}_request(e,t){return fetch(e,t).then(this._checkResponse)}getAppInfo(){return Promise.all([this.getInitialCards(),this.getUserInfo()])}getUserInfo(){return this._request(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers})}getInitialCards(){return this._request(`${this._baseUrl}/cards`,{method:"GET",headers:this._headers})}addNewCard({name:e,link:t}){return this._request(`${this._baseUrl}/cards`,{method:"POST",headers:{...this._headers,"Content-Type":"application/json"},body:JSON.stringify({name:e,link:t})})}deleteCard(e){return this._request(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:{...this._headers,"Content-Type":"application/json"}})}changeLike(e,t){return this._request(`${this._baseUrl}/cards/${e}/likes`,{method:t?"DELETE":"PUT",headers:{...this._headers,"Content-Type":"application/json"}})}editUserInfo({name:e,about:t}){return this._request(`${this._baseUrl}/users/me`,{method:"PATCH",headers:{...this._headers,"Content-Type":"application/json"},body:JSON.stringify({name:e,about:t})})}changeProfilePicture({avatar:e}){return this._request(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:{...this._headers,"Content-Type":"application/json"},body:JSON.stringify({avatar:e})})}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"3865b531-c637-4f08-82ee-36af95a41c77","Content-Type":"application/json"}}),s=document.querySelector(".profile__avatar"),c=document.querySelector(".profile__name"),i=document.querySelector(".profile__title"),l=document.forms["profile-form"],d=document.querySelector(".profile__edit-button"),u=document.querySelector(".image__container"),m=document.querySelector("#avatar-modal"),_=document.querySelector("#avatar-form"),h=m.querySelector(".modal__submit-button"),v=document.querySelector("#avatar-link-input"),p=document.querySelector("#edit-profile-modal"),y=p.querySelector("#profile-name-input"),f=p.querySelector("#profile-description-input"),S=p.querySelector(".modal__submit-button"),C=document.querySelector(".profile__new-post-button"),b=document.querySelector("#add-card-modal"),q=b.querySelector("#add-card-link-input"),E=b.querySelector("#add-card-name-input"),g=document.forms["add-card-form"],k=b.querySelector(".modal__submit-button"),L=document.querySelector("#cards_list"),x=document.querySelector("#card-template"),T=document.querySelector("#preview-modal"),U=T.querySelector(".modal__image"),$=T.querySelector(".modal__caption"),A=document.querySelector("#delete-modal"),D=A.querySelector(".modal__delete-button"),P=document.querySelector(".modal__cancel-button");let w,I;const j=document.querySelectorAll(".modal__close-button"),N=document.querySelectorAll(".modal");a.getAppInfo().then((([e,t])=>{e.forEach((e=>{const t=H(e);L.append(t)})),s.src=t.avatar,console.log(t),i.textContent=t.about,c.textContent=t.name})).catch((e=>{console.error(e)})),l.addEventListener("submit",(function(e){e.preventDefault(),S.textContent="Saving...",a.editUserInfo({name:y.value,about:f.value}).then((e=>{S.textContent="Save",c.textContent=e.name,i.textContent=e.about,G(p)})).catch((()=>{S.textContent="Save failed. Try again.",console.error(),setTimeout((()=>{D.textContent="Save"}),2e3)}))})),D.addEventListener("click",(function(){D.textContent="Deleting...",a.deleteCard(I).then((()=>{D.textContent="Delete",w.remove(),G(A)})).catch((()=>{D.textContent="Delete failed. Try again.",console.error(),setTimeout((()=>{D.textContent="Delete"}),2e3)}))})),P.addEventListener("click",(()=>G(A))),g.addEventListener("submit",(function(e){e.preventDefault(),k.textContent="Saving...";const t={name:E.value,link:q.value};a.addNewCard(t).then((t=>{k.textContent="Save",G(b);const r=H(t);e.target.reset(),L.prepend(r)})).catch((()=>{k.textContent="Save failed. Try again.",console.error(),setTimeout((()=>{k.textContent="Save"}),2e3)}))})),u.addEventListener("click",(()=>{J(m)})),C.addEventListener("click",(()=>{J(b)})),h.addEventListener("click",(function(e){e.preventDefault(),h.textContent="Saving...";const t={avatar:v.value};a.changeProfilePicture(t).then((e=>{h.textContent="Save",e.avatar=v.value,G(m),_.reset(),s.src=e.avatar})).catch((()=>{h.textContent="Save failed. Try again.",console.error(),setTimeout((()=>{h.textContent="Save"}),2e3)}))})),d.addEventListener("click",(function(){var r,n;y.value=c.textContent,f.value=i.textContent,r=l,n=e,[y,f].forEach((e=>{t(r,e,n)})),J(p)}));const B=e=>{N.forEach((t=>{e.target===t&&t.classList.contains("modal_opened")&&G(t)}))},O=e=>{N.forEach((t=>{"Escape"===e.key&&N.forEach(G)}))};function J(e){e.classList.add("modal_opened"),document.addEventListener("mousedown",B),document.addEventListener("keydown",O)}function G(e){e.classList.remove("modal_opened"),document.removeEventListener("mousedown",B),document.removeEventListener("keydown",O)}function H(e){const t=x.content.querySelector(".card").cloneNode(!0);t.querySelector(".card__title").textContent=e.name;const r=t.querySelector(".card__image");r.src=e.link,r.alt=e.name;const n=t.querySelector(".card__like-button");return!0===e.isLiked&&n.classList.add("card__like-button_liked"),n.addEventListener("click",(t=>function(e,t){console.log(t),I=t._id;const r=!!e.target.classList.contains("card__like-button_liked");a.changeLike(t._id,r).then((()=>{!0===r?e.target.classList.remove("card__like-button_liked"):e.target.classList.add("card__like-button_liked")})).catch(console.error)}(t,e))),t.querySelector(".card__delete-button").addEventListener("click",(r=>function(e,t){w=e,I=t._id,J(A)}(t,e))),r.addEventListener("click",(()=>{U.src=e.link,U.alt=e.name,$.textContent=e.name,J(T)})),t}j.forEach((e=>{const t=e.closest(".modal");e.addEventListener("click",(()=>G(t)))})),o(e)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TyxPQUFPbkgsVUFBVVcsSUFBSSwwQkFDM0IsSUFFRDhGLE1BQU10RixRQUFRd0YsTUFDbkIsQ0F6RDhDMEIsQ0FBZXpCLEVBQUtHLEtBRTdDVixFQUFZeEcsY0FBYyx3QkFDbEN3QixpQkFBaUIsU0FBVXVGLEdBK0J4QyxTQUEwQlAsRUFBYVUsR0FDckNqQixFQUFlTyxFQUNmTixFQUFpQmdCLEVBQUtxQixJQUN0QmQsRUFBVTNCLEVBQ1osQ0FsQ0kyQyxDQUFpQmpDLEVBQWFVLEtBR2hDa0IsRUFBVTVHLGlCQUFpQixTQUFTLEtBQ2xDb0UsRUFBa0JlLElBQU1PLEVBQUsxRCxLQUM3Qm9DLEVBQWtCeUMsSUFBTW5CLEVBQUszRCxLQUM3QnNDLEVBQW9CM0YsWUFBY2dILEVBQUszRCxLQUN2Q2tFLEVBQVU5QixFQUFhLElBR2xCYSxDQUNULENBckNBTCxFQUFhL0UsU0FBU3NILElBQ3BCLE1BQU1DLEVBQVFELEVBQU9FLFFBQVEsVUFDN0JGLEVBQU9sSCxpQkFBaUIsU0FBUyxJQUFNMkYsRUFBV3dCLElBQU8sSUFpTDNENUgsRUFBaUIxQixFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9zcG90cy8uL3NyYy9zY3JpcHRzL3ZhbGlkYXRpb24uanMiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9zcG90cy8uL3NyYy9wYWdlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X3Nwb3RzLy4vc3JjL3V0aWxzL2FwaS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3Qgc2V0dGluZ3MgPSB7XHJcbiAgZm9ybVNlbGVjdG9yOiBcIi5tb2RhbF9fZm9ybVwiLFxyXG4gIGlucHV0U2VsZWN0b3I6IFwiLm1vZGFsX19pbnB1dFwiLFxyXG4gIHN1Ym1pdEJ1dHRvblNlbGVjdG9yOiBcIi5tb2RhbF9fc3VibWl0LWJ1dHRvblwiLFxyXG4gIGluYWN0aXZlQnV0dG9uQ2xhc3M6IFwibW9kYWxfX3N1Ym1pdC1idXR0b25faW5hY3RpdmVcIixcclxuICBpbnB1dEVycm9yQ2xhc3M6IFwibW9kYWxfX2lucHV0X3R5cGVfZXJyb3JcIixcclxuICBlcnJvckNsYXNzOiBcIm1vZGFsX19lcnJvclwiLFxyXG59O1xyXG5cclxuY29uc3Qgc2hvd0lucHV0RXJyb3IgPSAoZm9ybUVsLCBpbnB1dEVsLCBlcnJvck1zZywgY29uZmlnKSA9PiB7XHJcbiAgY29uc3QgZXJyb3JNc2dFbCA9IGZvcm1FbC5xdWVyeVNlbGVjdG9yKGAjJHtpbnB1dEVsLmlkfS1lcnJvcmApO1xyXG4gIGVycm9yTXNnRWwudGV4dENvbnRlbnQgPSBlcnJvck1zZztcclxuICBpbnB1dEVsLmNsYXNzTGlzdC5hZGQoY29uZmlnLmlucHV0RXJyb3JDbGFzcyk7XHJcbn07XHJcblxyXG5jb25zdCBoaWRlSW5wdXRFcnJvciA9IChmb3JtRWwsIGlucHV0RWwsIGNvbmZpZykgPT4ge1xyXG4gIGNvbnN0IGVycm9yTXNnRWwgPSBmb3JtRWwucXVlcnlTZWxlY3RvcihgIyR7aW5wdXRFbC5pZH0tZXJyb3JgKTtcclxuICBlcnJvck1zZ0VsLnRleHRDb250ZW50ID0gXCJcIjtcclxuICBpbnB1dEVsLmNsYXNzTGlzdC5yZW1vdmUoY29uZmlnLmlucHV0RXJyb3JDbGFzcyk7XHJcbn07XHJcblxyXG5jb25zdCBjaGVja0lucHV0VmFsaWRpdHkgPSAoZm9ybUVsLCBpbnB1dEVsLCBjb25maWcpID0+IHtcclxuICBjb25zb2xlLmxvZyhpbnB1dEVsLnZhbGlkYXRpb25NZXNzYWdlKTtcclxuXHJcbiAgaWYgKCFpbnB1dEVsLnZhbGlkaXR5LnZhbGlkKSB7XHJcbiAgICBzaG93SW5wdXRFcnJvcihmb3JtRWwsIGlucHV0RWwsIGlucHV0RWwudmFsaWRhdGlvbk1lc3NhZ2UsIGNvbmZpZyk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGhpZGVJbnB1dEVycm9yKGZvcm1FbCwgaW5wdXRFbCwgY29uZmlnKTtcclxuICB9XHJcbn07XHJcblxyXG5jb25zdCBoYXNJbnZhbGlkSW5wdXQgPSAoaW5wdXRMaXN0LCBjb25maWcpID0+IHtcclxuICByZXR1cm4gaW5wdXRMaXN0LnNvbWUoKGlucHV0RWwpID0+IHtcclxuICAgIHJldHVybiAhaW5wdXRFbC52YWxpZGl0eS52YWxpZDtcclxuICB9KTtcclxufTtcclxuXHJcbmNvbnN0IHRvZ2dsZUJ1dHRvblN0YXRlID0gKGlucHV0TGlzdCwgYnV0dG9uRWxlbWVudCwgY29uZmlnKSA9PiB7XHJcbiAgaWYgKGhhc0ludmFsaWRJbnB1dChpbnB1dExpc3QpKSB7XHJcbiAgICBkaXNhYmxlQnV0dG9uKGJ1dHRvbkVsZW1lbnQsIGNvbmZpZyk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGJ1dHRvbkVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShjb25maWcuaW5hY3RpdmVCdXR0b25DbGFzcyk7XHJcbiAgICBidXR0b25FbGVtZW50LmRpc2FibGVkID0gZmFsc2U7XHJcbiAgfVxyXG59O1xyXG5cclxuY29uc3QgZGlzYWJsZUJ1dHRvbiA9IChidXR0b25FbGVtZW50LCBjb25maWcpID0+IHtcclxuICBidXR0b25FbGVtZW50LmNsYXNzTGlzdC5hZGQoY29uZmlnLmluYWN0aXZlQnV0dG9uQ2xhc3MpO1xyXG4gIGJ1dHRvbkVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHJlc2V0VmFsaWRhdGlvbiA9IChmb3JtRWwsIGlucHV0TGlzdCwgY29uZmlnKSA9PiB7XHJcbiAgaW5wdXRMaXN0LmZvckVhY2goKGlucHV0KSA9PiB7XHJcbiAgICBoaWRlSW5wdXRFcnJvcihmb3JtRWwsIGlucHV0LCBjb25maWcpO1xyXG4gIH0pO1xyXG59O1xyXG5cclxuY29uc3Qgc2V0RXZlbnRMaXN0ZW5lcnMgPSAoZm9ybUVsLCBjb25maWcpID0+IHtcclxuICBjb25zdCBpbnB1dExpc3QgPSBBcnJheS5mcm9tKGZvcm1FbC5xdWVyeVNlbGVjdG9yQWxsKGNvbmZpZy5pbnB1dFNlbGVjdG9yKSk7XHJcbiAgY29uc3QgYnV0dG9uRWxlbWVudCA9IGZvcm1FbC5xdWVyeVNlbGVjdG9yKGNvbmZpZy5zdWJtaXRCdXR0b25TZWxlY3Rvcik7XHJcblxyXG4gIGNvbnNvbGUubG9nKGlucHV0TGlzdCk7XHJcbiAgY29uc29sZS5sb2coYnV0dG9uRWxlbWVudCk7XHJcblxyXG4gIHRvZ2dsZUJ1dHRvblN0YXRlKGlucHV0TGlzdCwgYnV0dG9uRWxlbWVudCwgY29uZmlnKTtcclxuICBmb3JtRWwuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2V0XCIsICgpID0+IHtcclxuICAgIGRpc2FibGVCdXR0b24oYnV0dG9uRWxlbWVudCwgY29uZmlnKTtcclxuICB9KTtcclxuXHJcbiAgaW5wdXRMaXN0LmZvckVhY2goKGlucHV0RWwpID0+IHtcclxuICAgIGlucHV0RWwuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgY2hlY2tJbnB1dFZhbGlkaXR5KGZvcm1FbCwgaW5wdXRFbCwgY29uZmlnKTtcclxuICAgICAgdG9nZ2xlQnV0dG9uU3RhdGUoaW5wdXRMaXN0LCBidXR0b25FbGVtZW50LCBjb25maWcpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZW5hYmxlVmFsaWRhdGlvbiA9IChjb25maWcpID0+IHtcclxuICBjb25zdCBmb3JtTGlzdCA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChjb25maWcuZm9ybVNlbGVjdG9yKSk7XHJcbiAgZm9ybUxpc3QuZm9yRWFjaCgoZm9ybUVsKSA9PiB7XHJcbiAgICBzZXRFdmVudExpc3RlbmVycyhmb3JtRWwsIGNvbmZpZyk7XHJcbiAgfSk7XHJcbn07XHJcblxyXG5lbmFibGVWYWxpZGF0aW9uKHNldHRpbmdzKTtcclxuIiwiaW1wb3J0IHtcclxuICBlbmFibGVWYWxpZGF0aW9uLFxyXG4gIHNldHRpbmdzLFxyXG4gIHJlc2V0VmFsaWRhdGlvbixcclxufSBmcm9tIFwiLi4vc2NyaXB0cy92YWxpZGF0aW9uLmpzXCI7XHJcblxyXG5pbXBvcnQgXCIuL2luZGV4LmNzc1wiO1xyXG5cclxuaW1wb3J0IEFwaSBmcm9tIFwiLi4vdXRpbHMvYXBpLmpzXCI7XHJcblxyXG4vLyBjb25zdCBpbml0aWFsQ2FyZHMgPSBbXHJcbi8vICAge1xyXG4vLyAgICAgbmFtZTogXCJWYWwgVGhvcmVuc1wiLFxyXG4vLyAgICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL3Nwb3RzLzEtcGhvdG8tYnktbW9yaXR6LWZlbGRtYW5uLWZyb20tcGV4ZWxzLmpwZ1wiLFxyXG4vLyAgIH0sXHJcblxyXG4vLyAgIHtcclxuLy8gICAgIG5hbWU6IFwiUmVzdGF1cmFudCB0ZXJyYWNlXCIsXHJcbi8vICAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvc3BvdHMvMi1waG90by1ieS1jZWlsaW5lLWZyb20tcGV4ZWxzLmpwZ1wiLFxyXG4vLyAgIH0sXHJcblxyXG4vLyAgIHtcclxuLy8gICAgIG5hbWU6IFwiQW4gb3V0ZG9vciBjYWZlXCIsXHJcbi8vICAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvc3BvdHMvMy1waG90by1ieS10dWJhbnVyLWRvZ2FuLWZyb20tcGV4ZWxzLmpwZ1wiLFxyXG4vLyAgIH0sXHJcblxyXG4vLyAgIHtcclxuLy8gICAgIG5hbWU6IFwiQSB2ZXJ5IGxvbmcgYnJpZGdlLCBvdmVyIHRoZSBmb3Jlc3QgYW5kIHRocm91Z2ggdGhlIHRyZWVzXCIsXHJcbi8vICAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvc3BvdHMvNC1waG90by1ieS1tYXVyaWNlLWxhc2NoZXQtZnJvbS1wZXhlbHMuanBnXCIsXHJcbi8vICAgfSxcclxuXHJcbi8vICAge1xyXG4vLyAgICAgbmFtZTogXCJUdW5uZWwgd2l0aCBtb3JuaW5nIGxpZ2h0XCIsXHJcbi8vICAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvc3BvdHMvNS1waG90by1ieS12YW4tYW5oLW5ndXllbi1mcm9tLXBleGVscy5qcGdcIixcclxuLy8gICB9LFxyXG5cclxuLy8gICB7XHJcbi8vICAgICBuYW1lOiBcIk1vdW50YWluIGhvdXNlXCIsXHJcbi8vICAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvc3BvdHMvNi1waG90by1ieS1tb3JpdHotZmVsZG1hbm4tZnJvbS1wZXhlbHMuanBnXCIsXHJcbi8vICAgfSxcclxuXHJcbi8vICAge1xyXG4vLyAgICAgbmFtZTogXCJHb2xkZW4gR2F0ZSBCcmlkZ2VcIixcclxuLy8gICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9zcG90cy83LXBob3RvLWJ5LWdyaWZmaW4td29vbGRyaWRnZS1mcm9tLXBleGVscy5qcGdcIixcclxuLy8gICB9LFxyXG4vLyBdO1xyXG5cclxuLy9JbnN0YW50aWF0ZSBBcGkgY2xhc3NcclxuXHJcbmNvbnN0IGFwaSA9IG5ldyBBcGkoe1xyXG4gIGJhc2VVcmw6IFwiaHR0cHM6Ly9hcm91bmQtYXBpLmVuLnRyaXBsZXRlbi1zZXJ2aWNlcy5jb20vdjFcIixcclxuICBoZWFkZXJzOiB7XHJcbiAgICBhdXRob3JpemF0aW9uOiBcIjM4NjViNTMxLWM2MzctNGYwOC04MmVlLTM2YWY5NWE0MWM3N1wiLFxyXG4gICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXHJcbiAgfSxcclxufSk7XHJcblxyXG4vL1NFTEVDVElORyBFTEVNRU5UU1xyXG5cclxuLy9Qcm9maWxlIEVsZW1lbnRzXHJcbmNvbnN0IHByb2ZpbGVJbWFnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9fYXZhdGFyXCIpO1xyXG5jb25zdCBwcm9maWxlTmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9fbmFtZVwiKTtcclxuY29uc3QgcHJvZmlsZURlc2NyaXB0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX190aXRsZVwiKTtcclxuY29uc3QgZWRpdEZvcm1FbGVtZW50ID0gZG9jdW1lbnQuZm9ybXNbXCJwcm9maWxlLWZvcm1cIl07XHJcbmNvbnN0IHByb2ZpbGVFZGl0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19lZGl0LWJ1dHRvblwiKTtcclxuXHJcbi8vQXZhdGFyIEVsZW1lbnRzXHJcbmNvbnN0IGNoYW5nZVByb2ZQaWMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmltYWdlX19jb250YWluZXJcIik7XHJcbmNvbnN0IGF2YXRhck1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNhdmF0YXItbW9kYWxcIik7XHJcbmNvbnN0IGF2YXRhckZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2F2YXRhci1mb3JtXCIpO1xyXG5jb25zdCBhdmF0YXJNb2RhbFN1Ym1pdCA9IGF2YXRhck1vZGFsLnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX3N1Ym1pdC1idXR0b25cIik7XHJcbmNvbnN0IGF2YXRhclBpY0xpbmsgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2F2YXRhci1saW5rLWlucHV0XCIpO1xyXG5cclxuLy9Qcm9maWxlIEVkaXQgTW9kYWwgRWxlbWVudHNcclxuY29uc3QgZWRpdE1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNlZGl0LXByb2ZpbGUtbW9kYWxcIik7XHJcbmNvbnN0IGVkaXRNb2RhbE5hbWVJbnB1dCA9IGVkaXRNb2RhbC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGUtbmFtZS1pbnB1dFwiKTtcclxuY29uc3QgZWRpdE1vZGFsRGVzY3JpcHRpb25JbnB1dCA9IGVkaXRNb2RhbC5xdWVyeVNlbGVjdG9yKFxyXG4gIFwiI3Byb2ZpbGUtZGVzY3JpcHRpb24taW5wdXRcIlxyXG4pO1xyXG5jb25zdCBwcm9maWxlRWRpdFN1Ym1pdEJ1dHRvbiA9IGVkaXRNb2RhbC5xdWVyeVNlbGVjdG9yKFxyXG4gIFwiLm1vZGFsX19zdWJtaXQtYnV0dG9uXCJcclxuKTtcclxuXHJcbi8vTmV3IFBvc3QgRWxlbWVudHNcclxuY29uc3QgY2FyZE1vZGFsQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19uZXctcG9zdC1idXR0b25cIik7XHJcbmNvbnN0IGNhcmRNb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYWRkLWNhcmQtbW9kYWxcIik7XHJcbmNvbnN0IGNhcmRNb2RhbEltYWdlTGlua0lucHV0ID0gY2FyZE1vZGFsLnF1ZXJ5U2VsZWN0b3IoXCIjYWRkLWNhcmQtbGluay1pbnB1dFwiKTtcclxuY29uc3QgY2FyZE1vZGFsQ2FwdGlvbklucHV0ID0gY2FyZE1vZGFsLnF1ZXJ5U2VsZWN0b3IoXCIjYWRkLWNhcmQtbmFtZS1pbnB1dFwiKTtcclxuY29uc3QgY2FyZE1vZGFsRm9ybUVsZW1lbnQgPSBkb2N1bWVudC5mb3Jtc1tcImFkZC1jYXJkLWZvcm1cIl07XHJcbmNvbnN0IGNhcmRTdWJtaXRCdXR0b24gPSBjYXJkTW9kYWwucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fc3VibWl0LWJ1dHRvblwiKTtcclxuXHJcbi8vQ2FyZCBHYWxsZXJ5IEVsZW1lbnRzXHJcbmNvbnN0IGNhcmRzTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjY2FyZHNfbGlzdFwiKTtcclxuY29uc3QgY2FyZFRlbXBsYXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNjYXJkLXRlbXBsYXRlXCIpO1xyXG5jb25zdCBwcmV2aWV3TW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3ByZXZpZXctbW9kYWxcIik7XHJcbmNvbnN0IHByZXZpZXdNb2RhbEltYWdlID0gcHJldmlld01vZGFsLnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2ltYWdlXCIpO1xyXG5jb25zdCBwcmV2aWV3TW9kYWxDYXB0aW9uID0gcHJldmlld01vZGFsLnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2NhcHRpb25cIik7XHJcblxyXG4vL0RlbGV0ZSBNb2RhbCBFbGVtZW50c1xyXG5jb25zdCBkZWxldGVNb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZGVsZXRlLW1vZGFsXCIpO1xyXG5jb25zdCBkZWxldGVCdXR0b24gPSBkZWxldGVNb2RhbC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19kZWxldGUtYnV0dG9uXCIpO1xyXG5jb25zdCBjYW5jZWxCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19jYW5jZWwtYnV0dG9uXCIpO1xyXG5sZXQgc2VsZWN0ZWRDYXJkO1xyXG5sZXQgc2VsZWN0ZWRDYXJkSWQ7XHJcblxyXG4vL0dsb2JhbCBFbGVtZW50c1xyXG5jb25zdCBjbG9zZUJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLm1vZGFsX19jbG9zZS1idXR0b25cIik7XHJcbmNvbnN0IG1vZGFscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIubW9kYWxcIik7XHJcblxyXG5hcGlcclxuICAuZ2V0QXBwSW5mbygpXHJcbiAgLnRoZW4oKFtjYXJkcywgdXNlcl0pID0+IHtcclxuICAgIGNhcmRzLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgY29uc3QgY2FyZEVsZW1lbnQgPSBnZXRDYXJkRWxlbWVudChpdGVtKTtcclxuICAgICAgY2FyZHNMaXN0LmFwcGVuZChjYXJkRWxlbWVudCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBwcm9maWxlSW1hZ2Uuc3JjID0gdXNlci5hdmF0YXI7XHJcbiAgICBjb25zb2xlLmxvZyh1c2VyKTtcclxuXHJcbiAgICBwcm9maWxlRGVzY3JpcHRpb24udGV4dENvbnRlbnQgPSB1c2VyLmFib3V0O1xyXG4gICAgcHJvZmlsZU5hbWUudGV4dENvbnRlbnQgPSB1c2VyLm5hbWU7XHJcbiAgfSlcclxuICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gIH0pO1xyXG5cclxuLy9FVkVOVCBMSVNURU5FUlNcclxuZWRpdEZvcm1FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgaGFuZGxlUHJvZmlsZUZvcm1TdWJtaXQpO1xyXG5kZWxldGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGhhbmRsZURlbGV0ZVN1Ym1pdCk7XHJcbmNhbmNlbEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4gY2xvc2VNb2RhbChkZWxldGVNb2RhbCkpO1xyXG5jYXJkTW9kYWxGb3JtRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIGhhbmRsZU5ld1Bvc3RGb3JtU3VibWl0KTtcclxuY2hhbmdlUHJvZlBpYy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gIG9wZW5Nb2RhbChhdmF0YXJNb2RhbCk7XHJcbn0pO1xyXG5jYXJkTW9kYWxCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICBvcGVuTW9kYWwoY2FyZE1vZGFsKTtcclxufSk7XHJcbmF2YXRhck1vZGFsU3VibWl0LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBoYW5kbGVBdmF0YXJTdWJtaXQpO1xyXG5wcm9maWxlRWRpdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFxyXG4gIFwiY2xpY2tcIixcclxuICBoYW5kbGVQcm9maWxlRWRpdFxyXG5cclxuICAvLyAoKSA9PiB7XHJcbiAgLy8gZWRpdE1vZGFsTmFtZUlucHV0LnZhbHVlID0gcHJvZmlsZU5hbWUudGV4dENvbnRlbnQ7XHJcbiAgLy8gZWRpdE1vZGFsRGVzY3JpcHRpb25JbnB1dC52YWx1ZSA9IHByb2ZpbGVEZXNjcmlwdGlvbi50ZXh0Q29udGVudDtcclxuICAvLyByZXNldFZhbGlkYXRpb24oXHJcbiAgLy8gICBlZGl0Rm9ybUVsZW1lbnQsXHJcbiAgLy8gICBbZWRpdE1vZGFsTmFtZUlucHV0LCBlZGl0TW9kYWxEZXNjcmlwdGlvbklucHV0XSxcclxuICAvLyAgIHNldHRpbmdzXHJcbiAgLy8gKTtcclxuICAvLyBvcGVuTW9kYWwoZWRpdE1vZGFsKTt9XHJcbik7XHJcblxyXG4vL0VWRU5UIEhBTkRMRVJTXHJcblxyXG4vL0dsb2JhbCBGdW5jdGlvbmFsaXR5XHJcbmNvbnN0IGhhbmRsZUNsaWNrT3V0c2lkZSA9IChldnQpID0+IHtcclxuICBtb2RhbHMuZm9yRWFjaCgobW9kYWwpID0+IHtcclxuICAgIGlmIChldnQudGFyZ2V0ID09PSBtb2RhbCAmJiBtb2RhbC5jbGFzc0xpc3QuY29udGFpbnMoXCJtb2RhbF9vcGVuZWRcIikpIHtcclxuICAgICAgY2xvc2VNb2RhbChtb2RhbCk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn07XHJcblxyXG5jb25zdCBoYW5kbGVFc2NhcGVNb2RhbCA9IChldnQpID0+IHtcclxuICBtb2RhbHMuZm9yRWFjaCgobW9kYWwpID0+IHtcclxuICAgIGlmIChldnQua2V5ID09PSBcIkVzY2FwZVwiKSB7XHJcbiAgICAgIG1vZGFscy5mb3JFYWNoKGNsb3NlTW9kYWwpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gb3Blbk1vZGFsKG1vZGFsKSB7XHJcbiAgbW9kYWwuY2xhc3NMaXN0LmFkZChcIm1vZGFsX29wZW5lZFwiKTtcclxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIGhhbmRsZUNsaWNrT3V0c2lkZSk7XHJcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgaGFuZGxlRXNjYXBlTW9kYWwpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjbG9zZU1vZGFsKG1vZGFsKSB7XHJcbiAgbW9kYWwuY2xhc3NMaXN0LnJlbW92ZShcIm1vZGFsX29wZW5lZFwiKTtcclxuICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIGhhbmRsZUNsaWNrT3V0c2lkZSk7XHJcbiAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgaGFuZGxlRXNjYXBlTW9kYWwpO1xyXG59XHJcblxyXG5jbG9zZUJ1dHRvbnMuZm9yRWFjaCgoYnV0dG9uKSA9PiB7XHJcbiAgY29uc3QgcG9wdXAgPSBidXR0b24uY2xvc2VzdChcIi5tb2RhbFwiKTtcclxuICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IGNsb3NlTW9kYWwocG9wdXApKTtcclxufSk7XHJcblxyXG4vL0NhcmRzIGFuZCBDYXJkIEdhbGxlcnlcclxuZnVuY3Rpb24gZ2V0Q2FyZEVsZW1lbnQoZGF0YSkge1xyXG4gIGNvbnN0IGNhcmRFbGVtZW50ID0gY2FyZFRlbXBsYXRlLmNvbnRlbnRcclxuICAgIC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRcIilcclxuICAgIC5jbG9uZU5vZGUodHJ1ZSk7XHJcblxyXG4gIGNvbnN0IGNhcmROYW1lID0gY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX190aXRsZVwiKTtcclxuICBjYXJkTmFtZS50ZXh0Q29udGVudCA9IGRhdGEubmFtZTtcclxuXHJcbiAgY29uc3QgY2FyZEltYWdlID0gY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19pbWFnZVwiKTtcclxuICBjYXJkSW1hZ2Uuc3JjID0gZGF0YS5saW5rO1xyXG4gIGNhcmRJbWFnZS5hbHQgPSBkYXRhLm5hbWU7XHJcblxyXG4gIGNvbnN0IGNhcmRMaWtlID0gY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19saWtlLWJ1dHRvblwiKTtcclxuICBpZiAoZGF0YS5pc0xpa2VkID09PSB0cnVlKSB7XHJcbiAgICBjYXJkTGlrZS5jbGFzc0xpc3QuYWRkKFwiY2FyZF9fbGlrZS1idXR0b25fbGlrZWRcIik7XHJcbiAgfVxyXG4gIGNhcmRMaWtlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZ0KSA9PiBoYW5kbGVMaWtlQ2FyZChldnQsIGRhdGEpKTtcclxuXHJcbiAgY29uc3QgY2FyZERlbGV0ZSA9IGNhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fZGVsZXRlLWJ1dHRvblwiKTtcclxuICBjYXJkRGVsZXRlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZ0KSA9PlxyXG4gICAgaGFuZGxlRGVsZXRlQ2FyZChjYXJkRWxlbWVudCwgZGF0YSlcclxuICApO1xyXG5cclxuICBjYXJkSW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgIHByZXZpZXdNb2RhbEltYWdlLnNyYyA9IGRhdGEubGluaztcclxuICAgIHByZXZpZXdNb2RhbEltYWdlLmFsdCA9IGRhdGEubmFtZTtcclxuICAgIHByZXZpZXdNb2RhbENhcHRpb24udGV4dENvbnRlbnQgPSBkYXRhLm5hbWU7XHJcbiAgICBvcGVuTW9kYWwocHJldmlld01vZGFsKTtcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIGNhcmRFbGVtZW50O1xyXG59XHJcbmZ1bmN0aW9uIGhhbmRsZURlbGV0ZVN1Ym1pdCgpIHtcclxuICAvLyBldnQucHJldmVudERlZmF1bHQoKTtcclxuICBkZWxldGVCdXR0b24udGV4dENvbnRlbnQgPSBcIkRlbGV0aW5nLi4uXCI7XHJcbiAgYXBpXHJcbiAgICAuZGVsZXRlQ2FyZChzZWxlY3RlZENhcmRJZClcclxuICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgZGVsZXRlQnV0dG9uLnRleHRDb250ZW50ID0gXCJEZWxldGVcIjtcclxuICAgICAgc2VsZWN0ZWRDYXJkLnJlbW92ZSgpO1xyXG4gICAgICBjbG9zZU1vZGFsKGRlbGV0ZU1vZGFsKTtcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goKCkgPT4ge1xyXG4gICAgICBkZWxldGVCdXR0b24udGV4dENvbnRlbnQgPSBcIkRlbGV0ZSBmYWlsZWQuIFRyeSBhZ2Fpbi5cIjtcclxuICAgICAgY29uc29sZS5lcnJvcigpO1xyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICBkZWxldGVCdXR0b24udGV4dENvbnRlbnQgPSBcIkRlbGV0ZVwiO1xyXG4gICAgICB9LCAyMDAwKTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGhhbmRsZURlbGV0ZUNhcmQoY2FyZEVsZW1lbnQsIGRhdGEpIHtcclxuICBzZWxlY3RlZENhcmQgPSBjYXJkRWxlbWVudDtcclxuICBzZWxlY3RlZENhcmRJZCA9IGRhdGEuX2lkO1xyXG4gIG9wZW5Nb2RhbChkZWxldGVNb2RhbCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZUxpa2VDYXJkKGV2dCwgZGF0YSkge1xyXG4gIGNvbnNvbGUubG9nKGRhdGEpO1xyXG4gIHNlbGVjdGVkQ2FyZElkID0gZGF0YS5faWQ7XHJcbiAgY29uc3QgaXNMaWtlZCA9IGV2dC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiY2FyZF9fbGlrZS1idXR0b25fbGlrZWRcIilcclxuICAgID8gdHJ1ZVxyXG4gICAgOiBmYWxzZTtcclxuXHJcbiAgYXBpXHJcbiAgICAuY2hhbmdlTGlrZShkYXRhLl9pZCwgaXNMaWtlZClcclxuICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgaWYgKGlzTGlrZWQgPT09IHRydWUpIHtcclxuICAgICAgICBldnQudGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUoXCJjYXJkX19saWtlLWJ1dHRvbl9saWtlZFwiKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBldnQudGFyZ2V0LmNsYXNzTGlzdC5hZGQoXCJjYXJkX19saWtlLWJ1dHRvbl9saWtlZFwiKTtcclxuICAgICAgfVxyXG4gICAgfSlcclxuICAgIC5jYXRjaChjb25zb2xlLmVycm9yKTtcclxufVxyXG5cclxuLy9DcmVhdGUgTmV3IFBvc3RcclxuZnVuY3Rpb24gaGFuZGxlTmV3UG9zdEZvcm1TdWJtaXQoZXZ0KSB7XHJcbiAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgY2FyZFN1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudCA9IFwiU2F2aW5nLi4uXCI7XHJcblxyXG4gIGNvbnN0IGlucHV0VmFsdWVzID0ge1xyXG4gICAgbmFtZTogY2FyZE1vZGFsQ2FwdGlvbklucHV0LnZhbHVlLFxyXG4gICAgbGluazogY2FyZE1vZGFsSW1hZ2VMaW5rSW5wdXQudmFsdWUsXHJcbiAgfTtcclxuXHJcbiAgYXBpXHJcbiAgICAuYWRkTmV3Q2FyZChpbnB1dFZhbHVlcylcclxuICAgIC50aGVuKChkYXRhKSA9PiB7XHJcbiAgICAgIGNhcmRTdWJtaXRCdXR0b24udGV4dENvbnRlbnQgPSBcIlNhdmVcIjtcclxuICAgICAgY2xvc2VNb2RhbChjYXJkTW9kYWwpO1xyXG4gICAgICBjb25zdCBjYXJkRWxlbWVudCA9IGdldENhcmRFbGVtZW50KGRhdGEpO1xyXG5cclxuICAgICAgZXZ0LnRhcmdldC5yZXNldCgpO1xyXG4gICAgICBjYXJkc0xpc3QucHJlcGVuZChjYXJkRWxlbWVudCk7XHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKCgpID0+IHtcclxuICAgICAgY2FyZFN1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudCA9IFwiU2F2ZSBmYWlsZWQuIFRyeSBhZ2Fpbi5cIjtcclxuICAgICAgY29uc29sZS5lcnJvcigpO1xyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICBjYXJkU3VibWl0QnV0dG9uLnRleHRDb250ZW50ID0gXCJTYXZlXCI7XHJcbiAgICAgIH0sIDIwMDApO1xyXG4gICAgfSk7XHJcblxyXG4gIC8vXHJcblxyXG4gIC8vXHJcbiAgLy8gLy8gZGlzYWJsZUJ1dHRvbihjYXJkU3VibWl0QnV0dG9uLCBzZXR0aW5ncyk7XHJcbiAgLy9cclxufVxyXG4vL1VwZGF0ZSBQcm9maWxlIFBob3RvXHJcbmZ1bmN0aW9uIGhhbmRsZUF2YXRhclN1Ym1pdChldnQpIHtcclxuICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICBhdmF0YXJNb2RhbFN1Ym1pdC50ZXh0Q29udGVudCA9IFwiU2F2aW5nLi4uXCI7XHJcblxyXG4gIGNvbnN0IGlucHV0VmFsdWVzID0ge1xyXG4gICAgYXZhdGFyOiBhdmF0YXJQaWNMaW5rLnZhbHVlLFxyXG4gIH07XHJcbiAgLy8gY29uc3QgY2FyZEVsZW1lbnQgPSBnZXRDYXJkRWxlbWVudChpbnB1dFZhbHVlcyk7XHJcblxyXG4gIGFwaVxyXG4gICAgLmNoYW5nZVByb2ZpbGVQaWN0dXJlKGlucHV0VmFsdWVzKVxyXG4gICAgLnRoZW4oKGRhdGEpID0+IHtcclxuICAgICAgYXZhdGFyTW9kYWxTdWJtaXQudGV4dENvbnRlbnQgPSBcIlNhdmVcIjtcclxuICAgICAgZGF0YS5hdmF0YXIgPSBhdmF0YXJQaWNMaW5rLnZhbHVlO1xyXG4gICAgICBjbG9zZU1vZGFsKGF2YXRhck1vZGFsKTtcclxuICAgICAgYXZhdGFyRm9ybS5yZXNldCgpO1xyXG4gICAgICBwcm9maWxlSW1hZ2Uuc3JjID0gZGF0YS5hdmF0YXI7XHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKCgpID0+IHtcclxuICAgICAgYXZhdGFyTW9kYWxTdWJtaXQudGV4dENvbnRlbnQgPSBcIlNhdmUgZmFpbGVkLiBUcnkgYWdhaW4uXCI7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoKTtcclxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgYXZhdGFyTW9kYWxTdWJtaXQudGV4dENvbnRlbnQgPSBcIlNhdmVcIjtcclxuICAgICAgfSwgMjAwMCk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuLy9FZGl0IFByb2ZpbGUgSW5mb3JtYXRpb25cclxuZnVuY3Rpb24gaGFuZGxlUHJvZmlsZUVkaXQoKSB7XHJcbiAgZWRpdE1vZGFsTmFtZUlucHV0LnZhbHVlID0gcHJvZmlsZU5hbWUudGV4dENvbnRlbnQ7XHJcbiAgZWRpdE1vZGFsRGVzY3JpcHRpb25JbnB1dC52YWx1ZSA9IHByb2ZpbGVEZXNjcmlwdGlvbi50ZXh0Q29udGVudDtcclxuICByZXNldFZhbGlkYXRpb24oXHJcbiAgICBlZGl0Rm9ybUVsZW1lbnQsXHJcbiAgICBbZWRpdE1vZGFsTmFtZUlucHV0LCBlZGl0TW9kYWxEZXNjcmlwdGlvbklucHV0XSxcclxuICAgIHNldHRpbmdzXHJcbiAgKTtcclxuICBvcGVuTW9kYWwoZWRpdE1vZGFsKTtcclxufVxyXG5cclxuLy9VcGRhdGUgUHJvZmlsZSBOYW1lIGFuZCBEZXNjcmlwdGlvblxyXG5mdW5jdGlvbiBoYW5kbGVQcm9maWxlRm9ybVN1Ym1pdChldnQpIHtcclxuICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICBwcm9maWxlRWRpdFN1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudCA9IFwiU2F2aW5nLi4uXCI7XHJcbiAgYXBpXHJcbiAgICAuZWRpdFVzZXJJbmZvKHtcclxuICAgICAgbmFtZTogZWRpdE1vZGFsTmFtZUlucHV0LnZhbHVlLFxyXG4gICAgICBhYm91dDogZWRpdE1vZGFsRGVzY3JpcHRpb25JbnB1dC52YWx1ZSxcclxuICAgIH0pXHJcbiAgICAudGhlbigoZGF0YSkgPT4ge1xyXG4gICAgICBwcm9maWxlRWRpdFN1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudCA9IFwiU2F2ZVwiO1xyXG4gICAgICBwcm9maWxlTmFtZS50ZXh0Q29udGVudCA9IGRhdGEubmFtZTtcclxuICAgICAgcHJvZmlsZURlc2NyaXB0aW9uLnRleHRDb250ZW50ID0gZGF0YS5hYm91dDtcclxuICAgICAgY2xvc2VNb2RhbChlZGl0TW9kYWwpO1xyXG4gICAgfSlcclxuICAgIC5jYXRjaCgoKSA9PiB7XHJcbiAgICAgIHByb2ZpbGVFZGl0U3VibWl0QnV0dG9uLnRleHRDb250ZW50ID0gXCJTYXZlIGZhaWxlZC4gVHJ5IGFnYWluLlwiO1xyXG4gICAgICBjb25zb2xlLmVycm9yKCk7XHJcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIGRlbGV0ZUJ1dHRvbi50ZXh0Q29udGVudCA9IFwiU2F2ZVwiO1xyXG4gICAgICB9LCAyMDAwKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5lbmFibGVWYWxpZGF0aW9uKHNldHRpbmdzKTtcclxuIiwiY2xhc3MgQXBpIHtcclxuICBjb25zdHJ1Y3Rvcih7IGJhc2VVcmwsIGhlYWRlcnMsIGNhcmRJRCB9KSB7XHJcbiAgICB0aGlzLl9iYXNlVXJsID0gYmFzZVVybDtcclxuICAgIHRoaXMuX2hlYWRlcnMgPSBoZWFkZXJzO1xyXG4gICAgLy8gdGhpcy5hYm91dCA9IGFib3V0O1xyXG4gICAgLy8gdGhpcy5hdmF0YXIgPSBhdmF0YXI7XHJcbiAgICAvLyB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgLy8gdGhpcy5faWQgPSBfaWQ7XHJcbiAgfVxyXG5cclxuICBfY2hlY2tSZXNwb25zZShyZXMpIHtcclxuICAgIGlmIChyZXMub2spIHtcclxuICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XHJcbiAgICB9XHJcbiAgICAvLyBpZiB0aGUgc2VydmVyIHJldHVybnMgYW4gZXJyb3IsIHJlamVjdCB0aGUgcHJvbWlzZVxyXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGBFcnJvcjogJHtyZXMuc3RhdHVzfWApO1xyXG4gIH1cclxuXHJcbiAgX3JlcXVlc3QodXJsLCBvcHRpb25zKSB7XHJcbiAgICByZXR1cm4gZmV0Y2godXJsLCBvcHRpb25zKS50aGVuKHRoaXMuX2NoZWNrUmVzcG9uc2UpO1xyXG4gIH1cclxuXHJcbiAgZ2V0QXBwSW5mbygpIHtcclxuICAgIHJldHVybiBQcm9taXNlLmFsbChbdGhpcy5nZXRJbml0aWFsQ2FyZHMoKSwgdGhpcy5nZXRVc2VySW5mbygpXSk7XHJcbiAgfVxyXG5cclxuICAvLyBnZXRVc2VySW5mbygpIHtcclxuICAvLyAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS91c2Vycy9tZWAsIHtcclxuICAvLyAgICAgbWV0aG9kOiBcIkdFVFwiLFxyXG4gIC8vICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gIC8vICAgfSkudGhlbih0aGlzLl9jaGVja1Jlc3BvbnNlKTtcclxuICAvLyB9XHJcblxyXG4gIGdldFVzZXJJbmZvKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWVgLCB7XHJcbiAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gZ2V0SW5pdGlhbENhcmRzKCkge1xyXG4gIC8vICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzYCwge1xyXG4gIC8vICAgICBtZXRob2Q6IFwiR0VUXCIsXHJcbiAgLy8gICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgLy8gICB9KS50aGVuKHRoaXMuX2NoZWNrUmVzcG9uc2UpO1xyXG4gIC8vIH1cclxuXHJcbiAgZ2V0SW5pdGlhbENhcmRzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoYCR7dGhpcy5fYmFzZVVybH0vY2FyZHNgLCB7XHJcbiAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gYWRkTmV3Q2FyZCh7IG5hbWUsIGxpbmsgfSkge1xyXG4gIC8vICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzYCwge1xyXG4gIC8vICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gIC8vICAgICBoZWFkZXJzOiB7IC4uLnRoaXMuX2hlYWRlcnMsIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiIH0sXHJcbiAgLy8gICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAvLyAgICAgICBuYW1lLFxyXG4gIC8vICAgICAgIGxpbmssXHJcbiAgLy8gICAgIH0pLFxyXG4gIC8vICAgfSkudGhlbih0aGlzLl9jaGVja1Jlc3BvbnNlKTtcclxuICAvLyB9XHJcblxyXG4gIGFkZE5ld0NhcmQoeyBuYW1lLCBsaW5rIH0pIHtcclxuICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzYCwge1xyXG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICBoZWFkZXJzOiB7IC4uLnRoaXMuX2hlYWRlcnMsIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiIH0sXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICBuYW1lLFxyXG4gICAgICAgIGxpbmssXHJcbiAgICAgIH0pLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBkZWxldGVDYXJkKGlkKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fcmVxdWVzdChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkcy8ke2lkfWAsIHtcclxuICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxyXG4gICAgICBoZWFkZXJzOiB7IC4uLnRoaXMuX2hlYWRlcnMsIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiIH0sXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8vIGRlbGV0ZUNhcmQoaWQpIHtcclxuICAvLyAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkcy8ke2lkfWAsIHtcclxuICAvLyAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxyXG4gIC8vICAgICBoZWFkZXJzOiB7IC4uLnRoaXMuX2hlYWRlcnMsIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiIH0sXHJcbiAgLy8gICB9KS50aGVuKHRoaXMuX2NoZWNrUmVzcG9uc2UpO1xyXG4gIC8vIH1cclxuXHJcbiAgY2hhbmdlTGlrZShpZCwgaXNMaWtlZCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoYCR7dGhpcy5fYmFzZVVybH0vY2FyZHMvJHtpZH0vbGlrZXNgLCB7XHJcbiAgICAgIG1ldGhvZDogaXNMaWtlZCA/IFwiREVMRVRFXCIgOiBcIlBVVFwiLFxyXG4gICAgICBoZWFkZXJzOiB7IC4uLnRoaXMuX2hlYWRlcnMsIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiIH0sXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8vIGNoYW5nZUxpa2UoaWQsIGlzTGlrZWQpIHtcclxuICAvLyAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkcy8ke2lkfS9saWtlc2AsIHtcclxuICAvLyAgICAgbWV0aG9kOiBpc0xpa2VkID8gXCJERUxFVEVcIiA6IFwiUFVUXCIsXHJcbiAgLy8gICAgIGhlYWRlcnM6IHsgLi4udGhpcy5faGVhZGVycywgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIgfSxcclxuICAvLyAgIH0pLnRoZW4odGhpcy5fY2hlY2tSZXNwb25zZSk7XHJcbiAgLy8gfVxyXG5cclxuICBlZGl0VXNlckluZm8oeyBuYW1lLCBhYm91dCB9KSB7XHJcbiAgICByZXR1cm4gdGhpcy5fcmVxdWVzdChgJHt0aGlzLl9iYXNlVXJsfS91c2Vycy9tZWAsIHtcclxuICAgICAgbWV0aG9kOiBcIlBBVENIXCIsXHJcbiAgICAgIGhlYWRlcnM6IHsgLi4udGhpcy5faGVhZGVycywgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIgfSxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgIG5hbWUsXHJcbiAgICAgICAgYWJvdXQsXHJcbiAgICAgIH0pLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvLyBlZGl0VXNlckluZm8oeyBuYW1lLCBhYm91dCB9KSB7XHJcbiAgLy8gICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWVgLCB7XHJcbiAgLy8gICAgIG1ldGhvZDogXCJQQVRDSFwiLFxyXG4gIC8vICAgICBoZWFkZXJzOiB7IC4uLnRoaXMuX2hlYWRlcnMsIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiIH0sXHJcbiAgLy8gICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAvLyAgICAgICBuYW1lLFxyXG4gIC8vICAgICAgIGFib3V0LFxyXG4gIC8vICAgICB9KSxcclxuICAvLyAgIH0pLnRoZW4odGhpcy5fY2hlY2tSZXNwb25zZSk7XHJcbiAgLy8gfVxyXG5cclxuICAvLyBjaGFuZ2VQcm9maWxlUGljdHVyZSh7IGF2YXRhciB9KSB7XHJcbiAgLy8gICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWUvYXZhdGFyYCwge1xyXG4gIC8vICAgICBtZXRob2Q6IFwiUEFUQ0hcIixcclxuICAvLyAgICAgaGVhZGVyczogeyAuLi50aGlzLl9oZWFkZXJzLCBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIiB9LFxyXG4gIC8vICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgLy8gICAgICAgYXZhdGFyLFxyXG4gIC8vICAgICB9KSxcclxuICAvLyAgIH0pLnRoZW4odGhpcy5fY2hlY2tSZXNwb25zZSk7XHJcbiAgLy8gfVxyXG5cclxuICBjaGFuZ2VQcm9maWxlUGljdHVyZSh7IGF2YXRhciB9KSB7XHJcbiAgICByZXR1cm4gdGhpcy5fcmVxdWVzdChgJHt0aGlzLl9iYXNlVXJsfS91c2Vycy9tZS9hdmF0YXJgLCB7XHJcbiAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxyXG4gICAgICBoZWFkZXJzOiB7IC4uLnRoaXMuX2hlYWRlcnMsIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiIH0sXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICBhdmF0YXIsXHJcbiAgICAgIH0pLFxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBBcGk7XHJcbiJdLCJuYW1lcyI6WyJzZXR0aW5ncyIsImZvcm1TZWxlY3RvciIsImlucHV0U2VsZWN0b3IiLCJzdWJtaXRCdXR0b25TZWxlY3RvciIsImluYWN0aXZlQnV0dG9uQ2xhc3MiLCJpbnB1dEVycm9yQ2xhc3MiLCJlcnJvckNsYXNzIiwiaGlkZUlucHV0RXJyb3IiLCJmb3JtRWwiLCJpbnB1dEVsIiwiY29uZmlnIiwicXVlcnlTZWxlY3RvciIsImlkIiwidGV4dENvbnRlbnQiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJ0b2dnbGVCdXR0b25TdGF0ZSIsImlucHV0TGlzdCIsImJ1dHRvbkVsZW1lbnQiLCJoYXNJbnZhbGlkSW5wdXQiLCJzb21lIiwidmFsaWRpdHkiLCJ2YWxpZCIsImRpc2FibGVCdXR0b24iLCJkaXNhYmxlZCIsImFkZCIsImVuYWJsZVZhbGlkYXRpb24iLCJBcnJheSIsImZyb20iLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwic2V0RXZlbnRMaXN0ZW5lcnMiLCJjb25zb2xlIiwibG9nIiwiYWRkRXZlbnRMaXN0ZW5lciIsImNoZWNrSW5wdXRWYWxpZGl0eSIsInZhbGlkYXRpb25NZXNzYWdlIiwic2hvd0lucHV0RXJyb3IiLCJlcnJvck1zZyIsImFwaSIsImNvbnN0cnVjdG9yIiwiYmFzZVVybCIsImhlYWRlcnMiLCJjYXJkSUQiLCJ0aGlzIiwiX2Jhc2VVcmwiLCJfaGVhZGVycyIsIl9jaGVja1Jlc3BvbnNlIiwicmVzIiwib2siLCJqc29uIiwiUHJvbWlzZSIsInJlamVjdCIsInN0YXR1cyIsIl9yZXF1ZXN0IiwidXJsIiwib3B0aW9ucyIsImZldGNoIiwidGhlbiIsImdldEFwcEluZm8iLCJhbGwiLCJnZXRJbml0aWFsQ2FyZHMiLCJnZXRVc2VySW5mbyIsIm1ldGhvZCIsImFkZE5ld0NhcmQiLCJuYW1lIiwibGluayIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiZGVsZXRlQ2FyZCIsImNoYW5nZUxpa2UiLCJpc0xpa2VkIiwiZWRpdFVzZXJJbmZvIiwiYWJvdXQiLCJjaGFuZ2VQcm9maWxlUGljdHVyZSIsImF2YXRhciIsImF1dGhvcml6YXRpb24iLCJwcm9maWxlSW1hZ2UiLCJwcm9maWxlTmFtZSIsInByb2ZpbGVEZXNjcmlwdGlvbiIsImVkaXRGb3JtRWxlbWVudCIsImZvcm1zIiwicHJvZmlsZUVkaXRCdXR0b24iLCJjaGFuZ2VQcm9mUGljIiwiYXZhdGFyTW9kYWwiLCJhdmF0YXJGb3JtIiwiYXZhdGFyTW9kYWxTdWJtaXQiLCJhdmF0YXJQaWNMaW5rIiwiZWRpdE1vZGFsIiwiZWRpdE1vZGFsTmFtZUlucHV0IiwiZWRpdE1vZGFsRGVzY3JpcHRpb25JbnB1dCIsInByb2ZpbGVFZGl0U3VibWl0QnV0dG9uIiwiY2FyZE1vZGFsQnV0dG9uIiwiY2FyZE1vZGFsIiwiY2FyZE1vZGFsSW1hZ2VMaW5rSW5wdXQiLCJjYXJkTW9kYWxDYXB0aW9uSW5wdXQiLCJjYXJkTW9kYWxGb3JtRWxlbWVudCIsImNhcmRTdWJtaXRCdXR0b24iLCJjYXJkc0xpc3QiLCJjYXJkVGVtcGxhdGUiLCJwcmV2aWV3TW9kYWwiLCJwcmV2aWV3TW9kYWxJbWFnZSIsInByZXZpZXdNb2RhbENhcHRpb24iLCJkZWxldGVNb2RhbCIsImRlbGV0ZUJ1dHRvbiIsImNhbmNlbEJ1dHRvbiIsInNlbGVjdGVkQ2FyZCIsInNlbGVjdGVkQ2FyZElkIiwiY2xvc2VCdXR0b25zIiwibW9kYWxzIiwiY2FyZHMiLCJ1c2VyIiwiaXRlbSIsImNhcmRFbGVtZW50IiwiZ2V0Q2FyZEVsZW1lbnQiLCJhcHBlbmQiLCJzcmMiLCJjYXRjaCIsImVyciIsImVycm9yIiwiZXZ0IiwicHJldmVudERlZmF1bHQiLCJ2YWx1ZSIsImRhdGEiLCJjbG9zZU1vZGFsIiwic2V0VGltZW91dCIsImlucHV0VmFsdWVzIiwidGFyZ2V0IiwicmVzZXQiLCJwcmVwZW5kIiwib3Blbk1vZGFsIiwicmVzZXRWYWxpZGF0aW9uIiwiaW5wdXQiLCJoYW5kbGVDbGlja091dHNpZGUiLCJtb2RhbCIsImNvbnRhaW5zIiwiaGFuZGxlRXNjYXBlTW9kYWwiLCJrZXkiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY29udGVudCIsImNsb25lTm9kZSIsImNhcmRJbWFnZSIsImFsdCIsImNhcmRMaWtlIiwiX2lkIiwiaGFuZGxlTGlrZUNhcmQiLCJoYW5kbGVEZWxldGVDYXJkIiwiYnV0dG9uIiwicG9wdXAiLCJjbG9zZXN0Il0sInNvdXJjZVJvb3QiOiIifQ==